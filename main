#include <msp430.h> 

volatile unsigned int b = 0;             //decides which pattern to run

volatile unsigned int seconds = 0;             //decides which pattern to run

volatile unsigned int step = 2;             //decides which pattern to run

void delay(){
    volatile unsigned long i = 15000;

    while(i != 0){
        i = i - 1;
    }
}

void setOn(int port, int bit){
    if (port == 3 && bit == 0){
        P3OUT |= BIT0;   // P1OUT = P1OUT & ~0b00000001

    }else if(port == 3 && bit == 2){
        P3OUT |= BIT2;   // P1OUT = P1OUT & ~0b00000001

    }else if(port == 3 && bit == 3){
        P3OUT |= BIT3;   // P1OUT = P1OUT & ~0b00000001
    }else if(port == 2 && bit == 5){
        P2OUT |= BIT5;   // P1OUT = P1OUT & ~0b00000001
    }else if(port == 2 && bit == 0){
        P2OUT |= BIT0;
    }else if(port == 4 && bit == 4){
        P4OUT |= BIT4;
    }else if(port == 4 && bit == 7){
        P4OUT |= BIT7;
    }
}

void setOff(int port, int bit){
    if (port == 3 && bit == 0){
        P3OUT &= ~BIT0;

        }else if(port == 3 && bit == 2){
            P3OUT &= ~BIT2;

        }else if(port == 3 && bit == 3){
            P3OUT &= ~BIT3;
        }else if(port == 2 && bit == 5){
            P2OUT &= ~BIT5;
        }else if(port == 2 && bit == 0){
            P2OUT &= ~BIT0;
        }else if(port == 4 && bit == 4){
            P4OUT &= ~BIT4;
        }else if(port == 4 && bit == 7){
            P4OUT &= ~BIT7;
        }
}


/**
 * main.c
 */
int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	
	//LightsButton setup
	P4DIR &= ~BIT1;                 // Clear Bit P4.1. 0 = Input, 1 = Output
	P4REN |= BIT1;                  // Set 1 to Bit 1
	P4OUT |= BIT1;                  // Set 1 to Bit 1

	P4IES |=  BIT1;              // Makes sensitivity High-to-Low
	P4IE |= BIT1;               // Enable P4.1 IRQ
	P4IFG &= ~BIT1;             // Clear P4.1 IRQ Flag


	//Timer

	TB0CTL |= TBCLR;             // Reset timer
    TB0CTL |= TBSSEL__ACLK;      // Clock = ACKL
    TB0CTL |= MC__CONTINOUS;     // Mode=Continuous
    TB0CTL |= CNTL__8;            // 8-bit counter, not 16-bit
    TB0CTL |= TBIE;         // Local enable for TB0 Overflows
    TB0CTL &= ~TBIFG;       // Clear IRQ Flag

	//WiperButton setup
	P2DIR &= ~BIT3;                 // Clear Bit P4.1. 0 = Input, 1 = Output
	P2REN |= BIT3;                  // Set 1 to Bit 1
	P2OUT |= BIT3;

	P2IES |=  BIT3;              // Makes sensitivity High-to-Low
	P2IE |= BIT3;               // Enable P4.1 IRQ
	P2IFG &= ~BIT3;             // Clear P4.1 IRQ Flag

	//LED setup
	P3DIR |= BIT0;  //L1 head light set up
	P3DIR |= BIT2;  //L2 head light set up
    P4DIR |= BIT4;  //R1 head light set up
    P4DIR |= BIT7;  //R2 Head light set up
	P2DIR |= BIT0;  //Third brake light set up
	P2DIR |= BIT5;  //Forth brake light set up

	P3OUT &= ~BIT0;  //L1 head light set up
	P3OUT &= ~BIT2;  //L2 head light set up
    P4OUT &= ~BIT4;  //R1 head light set up
    P4OUT &= ~BIT7;  //R2 head light set up
	P2OUT &= ~BIT0;  //Third brake light set up
    P2OUT &= ~BIT5;  //Forth brake light set up

    //Servo Pin
    P4DIR |= BIT6;  //Servo Pin set up

    P4OUT &= ~BIT6;  //Servo Pin set up


	PM5CTL0 &= ~LOCKLPM5;       // turn on digital I/O

	 volatile unsigned int LightsButton;                        // Store the information in the register


	 __enable_interrupt();       // Enable Global Interrupt

	 for (;;){

	     //More LightsButton setup
	        //LightsButton = P4IN;                 // Store a copy

	      //  LightsButton &= BIT1;                // Clear everything and keep Bit 1

	     //More WiperButton setup
	       // WiperButton = P2IN;                 // Store a copy

	       // WiperButton &= BIT3;                // Clear everything and keep Bit 1


	        //Start lights off


	        //Loop Start
//	        if (LightsButton == 0){               // If it is 0, the user pressed the button
//	            b += 1;
	            if (b == 1){
	                setOn(3,0); //L1
	                setOn(4,4); //R1
	                setOn(2,0); //RB
	                setOn(2,5); //LB
	            }if(b == 2){
                    setOn(3,0); //L1
                    setOn(4,4); //R1
                    setOn(4,7); //R2
	                setOn(3,2); //L2
                    setOn(2,0); //RB
                    setOn(2,5); //LB

	            }if (b == 3){
                    setOff(3,0); //L1
                    setOff(4,4); //R1
                    setOff(4,7); //R2
                    setOff(3,2); //L2
	                setOff(2,0); //RB
                    setOff(2,5); //LB
                    b = 0;
	            }
//	        }

	    }

	return 0;
}

#pragma vector = PORT2_VECTOR
__interrupt void ISR_PORT2(void) {

    step += 2;

    if(step == 6){
        step = 2;
    }

   P2IFG &= ~BIT3;         // Clear P4.1 IRQ Flag
}

#pragma vector = PORT4_VECTOR
__interrupt void ISR_PORT4_BIT1(void) {

//   P3OUT ^= BIT0;         // Toggle P1.0
    b += 1;

   P4IFG &= ~BIT1;         // Clear P4.1 IRQ Flag
}



#pragma vector = TIMER0_B1_VECTOR
__interrupt void ISR_TB0_Overflow(void){

    seconds += step;

    if(seconds >= 2000){
        //b += 1;
         P4OUT |= BIT6;
        delay();
          P4OUT &= ~BIT6;
        seconds = 0;
    }

//    else if (seconds == 4){
//
//    }else if (seconds == 6){
//
//        seconds = 0;
//
//    }


   TB0CTL &= ~TBIFG;             // Clear IRQ Flag
}


